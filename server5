#include <stdio.h>
#include <winsock2.h>
#pragma comment(lib,"ws2_32.lib")
/*
网络编程-完成例程请求
*/
#define PORT 6000
#define MSGSIZE 1024
//定义数据结构
typedef struct{
	WSAOVERLAPPED overlap;
	WSABUF        Buffer;
	DWORD          NumberOfBytesRecvd;
	DWORD          Flags;
	SOCKET          sClient;
} MyOverStruct;
BOOL isGet=FALSE;
SOCKET sSocket;
//定义子线程和完成例程函数
DWORD WINAPI ServerThread(LPVOID lpParam);
void CALLBACK CompletionRoutine(DWORD dwError,
	DWORD cbTransferred,
	LPWSAOVERLAPPED lpOverlapped,
	DWORD dwFlags);
int main(){
	//定义数据类型
	WSADATA wsaData;
	SOCKET sListen;
	SOCKADDR_IN local={0},client={0};

	WSAStartup(MAKEWORD(2,2),&wsaData);
	sListen=socket(AF_INET,SOCK_STREAM,0);
	local.sin_addr.S_un.S_addr=htonl(INADDR_ANY);
	local.sin_family=AF_INET;
	local.sin_port=htons(PORT);
	bind(sListen,(SOCKADDR*)&local,sizeof(SOCKADDR));
	listen(sListen,5);

	//创建子线程
	CreateThread(NULL,0,ServerThread,NULL,0,NULL);
	int Addresslen=sizeof(SOCKADDR);
	while(1){

		//该循环接收的客户端套接字保存到全局变量
		sSocket=accept(sListen,(SOCKADDR*)&client,&Addresslen);
		isGet=TRUE;

	}
	closesocket(sSocket);
	WSACleanup();
	return 0;
}
DWORD WINAPI ServerThread(LPVOID lpParam){
	MyOverStruct *lpmyoverstruct=NULL;
	while(1){

		//如果接收到socket，则执行循环
		if(isGet){

			//为自定义结构体指针分配内存
			lpmyoverstruct=(MyOverStruct*)HeapAlloc(GetProcessHeap(),HEAP_ZERO_MEMORY,sizeof(MyOverStruct));

			//为结构体赋值
			lpmyoverstruct->Buffer.len=MSGSIZE;
			//为接收数据缓冲区分配内存
			lpmyoverstruct->Buffer.buf=(char*)HeapAlloc(GetProcessHeap(),HEAP_ZERO_MEMORY,MSGSIZE);

			//将全局变量中保存的客户端套接字给结构体
			lpmyoverstruct->sClient=sSocket;

			//调用WSARecv()函数开始重叠IO，最后一个参数是完成例程函数
			WSARecv(lpmyoverstruct->sClient,
				&lpmyoverstruct->Buffer,
				1,
				&lpmyoverstruct->NumberOfBytesRecvd,
				&lpmyoverstruct->Flags,
				&lpmyoverstruct->overlap,
				CompletionRoutine);
			isGet=FALSE;
		}
		//设置线程为可警告的等待状态
		SleepEx(1000,TRUE);
	}

	return 0;
}
//该函数是完成例程函数的实现
void CALLBACK CompletionRoutine(DWORD dwError,DWORD cbTransferred,LPWSAOVERLAPPED lpOverlapped,DWORD dwFlags){
	MyOverStruct *lpmyoverstruct=(MyOverStruct*)lpOverlapped;
	//判断是否有错误
	if(dwError!=0 || cbTransferred==0){
		closesocket(lpmyoverstruct->sClient);
		HeapFree(GetProcessHeap(),0,lpmyoverstruct->Buffer.buf);
		HeapFree(GetProcessHeap(),0,lpmyoverstruct);
	}
	//对接收数据进行处理
	else{
		//打印结果
		printf("%s\n",lpmyoverstruct->Buffer.buf);

		char msg[]="收到消息";
		send(lpmyoverstruct->sClient,msg,sizeof(msg),0);

		memset(&lpmyoverstruct->overlap,0,sizeof(WSAOVERLAPPED));
		lpmyoverstruct->Buffer.len=MSGSIZE;
		//重新执行WSARecv进行重叠IO
		WSARecv(lpmyoverstruct->sClient,
			&lpmyoverstruct->Buffer,
			1,
			&lpmyoverstruct->NumberOfBytesRecvd,
			&lpmyoverstruct->Flags,
			&lpmyoverstruct->overlap,    //  (LPWSAOVERLAPPED)lpmyoverstruct/*->overlap*/,  可以修改成这样
			CompletionRoutine);
	}
}
