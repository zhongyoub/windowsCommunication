
#include<iostream>
#include<WinSock2.h>
#pragma comment(lib,"ws2_32.lib")
/*
WSA事件模型，
*/
using namespace std;
int main()
{
	//初始化套接字
	WSADATA wsaData;
	WSAStartup(MAKEWORD(2,2),&wsaData);
	SOCKET sListen=socket(AF_INET,SOCK_STREAM,0);
	SOCKADDR_IN cAddr;
	cAddr.sin_addr.S_un.S_addr=INADDR_ANY;
	cAddr.sin_port=htons(6000);
	cAddr.sin_family=AF_INET;
	//绑定监听
	bind(sListen,(SOCKADDR*)&cAddr,sizeof(SOCKADDR));
	listen(sListen,5);

	//创建事件对象
	WSAEVENT Event=WSACreateEvent();   //这个函数默认是创建人工事件，需手动重置信号
	//为监听套接字注册网络事件，同时将事件对象与网络事件关联起来
	if(SOCKET_ERROR==WSAEventSelect(sListen,Event,FD_ACCEPT|FD_CLOSE))    
	{
		cout<<"WSAEventSelect error with code:"<<WSAGetLastError();
		return 0;
	}
	//事件总共数量
	int EventsSum=0;
	//创建socket和event数组，WSA_MAXIMUM_WAIT_EVENTS宏代表64，所以这种模型每个线程最多只能管理64个套接字
	WSAEVENT arrayEvent[WSA_MAXIMUM_WAIT_EVENTS];
	SOCKET arraySocket[WSA_MAXIMUM_WAIT_EVENTS];
	//将创建的事件对象与之绑定的套接字分别添加进相应的数组
	arrayEvent[EventsSum]=Event;
	arraySocket[EventsSum]=sListen;
	EventsSum++;
	while(1)
	{
		//该函数等待网络事件的发生
		/*
		DWORD WSAWaitForMultipleEvents(
		DWORD cEvents,                  //等待事件句柄的数量，最少为1个，最多是64个，这也是这种模型的限制。
		const WSAEVENT FAR *lphEvents,  //指向等待事件集合的指针，该参数和上一个参数构成了事件数组。
		BOOL fWaitAll,                  //是否等待所有事件都为有信号状态时才返回
		DWORD dwTimeOUT,                //设置超时时间，时间单位是毫秒。如果设置为WSA_INFINITE，就表示无限等待，直到满足fWaitAll的条件
		BOOL fAlertable                 //这个参数说明当完成例程在系统队列中排队等待执行时，该函数是否返回。这个参数主要用于重叠IO模型，这里设置为FALSE
		);
		*/
		int dwIndex=WSAWaitForMultipleEvents(EventsSum,arrayEvent,false,WSA_INFINITE,FALSE);  
		//判断是否发生错误
		if(dwIndex==WSA_WAIT_FAILED)
		{
			cout<<"WSAWaitForMultipleEvents failed\n";
			continue;
		}
		//根据函数返回的值获取先关的socket和event
		WSAEVENT nowEvent=arrayEvent[dwIndex-WSA_WAIT_EVENT_0];
		SOCKET nowSocket=arraySocket[dwIndex-WSA_WAIT_EVENT_0];
		
		//创建WSAEVENTNETWORKS结构
		WSANETWORKEVENTS  networkEvents;

		//调用WSAEnumNetworkEvents函数获取发生在该套接字上的具体网络事件，
		//并且设置第二个参数为当前事件对象，该函数会自动将事件对象重置为无信号状态
		/*
		int WSAEnumNetworkEvents (
		SOCKET s,                  //发生网络事件的套接字句柄
		WSAEVENT hEventObject,     //被重置的事件对象（可选），若该参数有值，则会把相应的事件对象从有信号状态设置成无信号状态
		LPWSANETWORKEVENTS lpNetworkEvents  //一个指向WSANETWORKEVENTS结构体的指针，这个结构体包含了具体的网络事件和相关的错误代码。
		);
		*/
		if(WSAEnumNetworkEvents(nowSocket,nowEvent,&networkEvents)==0)    
		{
			//FD_ACCEPT事件，将lNetworkEvents变量与FD_ACCEPT进行位与操作，
			//如果真，则表示发生了FD_ACCEPT网络事件
			if(networkEvents.lNetworkEvents&FD_ACCEPT)
			{
				//创建相关变量获取客户端套接字
				SOCKADDR_IN acceptAddr;
				int accept_len=sizeof(SOCKADDR);
				SOCKET sAccept;
				
				//接收客户端套接字
				sAccept=accept(nowSocket,(SOCKADDR*)&acceptAddr,&accept_len);
				//将该套接字注册，并设置网络事件为可读与关闭以及可写
				arraySocket[EventsSum]=sAccept;     
				arrayEvent[EventsSum]=WSACreateEvent();    
				WSAEventSelect(sAccept,arrayEvent[EventsSum],FD_READ | FD_CLOSE | FD_WRITE);
				//将总事件对象个数自增
				EventsSum++;
			}
			else if(networkEvents.lNetworkEvents&FD_READ)
			{
				char recvBuf[1024];
				char sendBuf[1024];
				recv(arraySocket[dwIndex-WSA_WAIT_EVENT_0],recvBuf,sizeof(recvBuf),0);
				cout<<recvBuf<<endl;
				cin.getline(sendBuf,sizeof(sendBuf));
				send(arraySocket[dwIndex-WSA_WAIT_EVENT_0],sendBuf,strlen(sendBuf),0);

			}
			//FD_CLOSE网络事件，判断方法和上述相同
			else if(networkEvents.lNetworkEvents & FD_CLOSE){
				printf("A socket is closing\n");
				//关闭相关套接字
				closesocket(arraySocket[dwIndex-WSA_WAIT_EVENT_0]);
				//关闭相关的事件对象
				WSACloseEvent(arrayEvent[dwIndex-WSA_WAIT_EVENT_0]);
				//将被关闭的套接字和被关闭的事件对象从数组中移除，防止出现无限期阻塞
				for(int i=dwIndex-WSA_WAIT_EVENT_0;i<EventsSum-1;i++){
					arraySocket[i]=arraySocket[i+1];
					arrayEvent[i]=arrayEvent[i+1];
				}
				//事件总数量减一
				EventsSum--;
			}
			//FD_WRITE网络事件
			else if(networkEvents.lNetworkEvents & FD_WRITE){
				printf("FD_WRITE event has happened!\n");
			}
		}
	}
	closesocket(sListen);
	WSACleanup();
	return 0;
}
